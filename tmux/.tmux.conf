
### Tmux Configuration ###
            #
            #
            #
            #
            #
            #
            #
            #


# Load reset file
# source-file ~/.tmux.reset.conf
#

# Make screen-256color default
set -g default-terminal "screen-256color"

# Default to using zsh
set-option -g default-shell /bin/zsh

# set -g @themepack 'basic'

# Remap prefix key to C-t
unbind C-b
set -g prefix C-t
bind C-t send-prefix

# Window and chained pane switching 
bind-key C-t select-pane -t :.+

# Last window hotkey
bind l last-window
bind k confirm-before -p "kill-window #W? (y/n)" kill-window

# Keybinding for reloading tmux config            
bind r source-file ~/.tmux.conf

# Keybinding to kill the current session
bind K kill-session

# Rename terminals
set -g set-titles on
set -g set-titles-string '#(whoami)::#h::#(curl ipecho.net/plain;echo)'

# Set status line
# set -g status-right '#{prefix_highlight} | %a %Y-%m-%d %H:%M'
# set -g @prefix_highlight_fg 'black'
# set -g @prefix_highlight_bg 'red'

# From smallhadroncollider
set -g status-interval 5 # update every five seconds
set -g status-left '  #S   '
set -g status-right-length 70
set -g status-left-length 150
set -g @online_icon ""
set -g @offline_icon ""
set -g @batt_full_charge_icon ""
set -g @batt_high_charge_icon ""
set -g @batt_medium_charge_icon ""
set -g @batt_low_charge_icon ""
set -g @batt_charging_icon ""
set -g @batt_charged_icon ""
set -g @batt_attached_icon ""
set -g status-right '   #{cpu_percentage} |  %H:%M |  %d %B %Y '
set -g status-justify left


setw -g window-status-format " #W "
setw -g window-status-current-format " #W "
# setw -g window-status-current-fg magenta

# Keybindings for window splitting
bind | split-window -h
bind - split-window -v
bind = split-window -v

# Replace a dead pane
bind * respawn-pane -k

# Highlight active window
# set-window-option -g window-status-current-bg red
set -g window-status-current-style bg=red
set -g window-status-style bg=green
set -g pane-active-border-style fg=green

# Set window notifications
setw -g monitor-activity on
set -g visual-activity off

# Autorename
# setw -g automatic-rename on
# set-option -g allow-rename on

# Mouse mode
set-option -g mouse on

# Disable mouse right-click menu
unbind -n MouseDown3Pane

# Plugin settings
set -g @jump-key 'j'
set -g @extrakto_grab_area "window full"
set -g @extrakto_split_direction "v"
set -g @extrakto_filter_order "hex word all line"

# Vim keybindings
# hjkl for moving between panes
# bind h select-pane -L
# bind j select-pane -D
# bind k select-pane -U
# bind l select-pane -R # conflicts with last window cmd

## Vim motion keys in copy mode
setw -g mode-keys vi
unbind p
bind p paste-buffer
run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6-)"
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' \
  "bind-key Escape copy-mode; \
  bind-key -t vi-copy Escape cancel; \
  bind-key p paste-buffer; \
  bind-key -t vi-copy v begin-selection; \
  bind-key -t vi-copy V select-line; \
  bind-key -t vi-copy r rectangle-toggle; \
  bind -t vi-copy y copy-pipe 'xclip -in -selection clipboard'"

if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1 ]' \
  "bind-key -T copy-mode-vi 'v' send -X begin-selection; \
  bind-key -T copy-mode-vi 'V' send -X select-line; \
  bind-key -T copy-mode-vi 'r' send -X rectangle-toggle; \
  bind-key -T copy-mode-vi 'y' send -X copy-pipe -x 'xclip -in -selection clipboard' \; send-keys -x clear-selection"

# Vim text objects
# https://old.reddit.com/r/vim/comments/12eg832/is_there_a_way_to_have_vim_objects_in_tmux/
bind -T copy-mode-vi i switch-client -T copyModeMultiKey_i
bind -T copyModeMultiKey_i w send-keys -X select-word
bind -T copyModeMultiKey_i W send-keys -X clear-selection \; send-keys -X previous-space \; send-keys -X begin-selection \; send-keys -X next-space-end
bind -T copyModeMultiKey_i b send-keys -X clear-selection \; send-keys -X jump-to-backward '(' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ')'
bind -T copyModeMultiKey_i ( send-keys -X clear-selection \; send-keys -X jump-to-backward '(' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ')'
bind -T copyModeMultiKey_i ) send-keys -X clear-selection \; send-keys -X jump-to-backward '(' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ')'
bind -T copyModeMultiKey_i B send-keys -X clear-selection \; send-keys -X jump-to-backward '{' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '}'
bind -T copyModeMultiKey_i \{ send-keys -X clear-selection \; send-keys -X jump-to-backward '{' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '}'
bind -T copyModeMultiKey_i \} send-keys -X clear-selection \; send-keys -X jump-to-backward '{' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '}'
bind -T copyModeMultiKey_i [ send-keys -X clear-selection \; send-keys -X jump-to-backward '[' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ']'
bind -T copyModeMultiKey_i ] send-keys -X clear-selection \; send-keys -X jump-to-backward '[' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ']'
bind -T copyModeMultiKey_i < send-keys -X clear-selection \; send-keys -X jump-to-backward '<' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '>'
bind -T copyModeMultiKey_i > send-keys -X clear-selection \; send-keys -X jump-to-backward '<' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '>'
bind -T copyModeMultiKey_i ` send-keys -X clear-selection \; send-keys -X jump-to-backward '`' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '`'
bind -T copyModeMultiKey_i \' send-keys -X clear-selection \; send-keys -X jump-to-backward "'" \; send-keys -X begin-selection \; send-keys -X jump-to-forward "'"
bind -T copyModeMultiKey_i \" send-keys -X clear-selection \; send-keys -X jump-to-backward '"' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '"'
bind -T copyModeMultiKey_i l send-keys -X clear-selection \; send-keys -X back-to-indentation \; send-keys -X begin-selection \; send-keys -X end-of-line \; send-keys -X cursor-left \; send-keys -X other-end

# Use v to trigger selection
# Use y to yank current selection
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
 
## Vim resize keys
bind -r < resize-pane -L 1
bind -r > resize-pane -R 1
# bind -r - resize-pane -D 1
# bind -r + resize-pane -U 1

# Pane resize with <Alt-Arrowkey>     
bind -n M-up    resize-pane -U 1
bind -n M-down  resize-pane -D 1
bind -n M-left  resize-pane -L 1
bind -n M-right resize-pane -R 1

# Synchronize panes toggle
# bind e set -g synchronize-panes
bind e if -F '#{pane_synchronized}' \
                'setw synchronize-panes off; \
                setw pane-active-border-style fg=green,bg=default; \
                setw pane-border-format       " #P "' \
            'setw synchronize-panes on; \
            setw pane-active-border-style fg=red; \
            setw pane-border-format       " #P - Pane Synchronization ON "'

# Use the line below to query for this option
# tmux show-window-option -g synchronize-panes

# Set history scrollback
set -g history-limit 50000

# Start pane number at one
set -g base-index 0

# Window switching
bind -n S-up    new-window
bind -n S-down  confirm-before -p "kill-window #W? (y/n)" kill-window
bind -n S-left  prev
bind -n S-right next

# Pane switching
bind -n C-left  select-pane -L
bind -n C-right select-pane -R
bind -n C-down  select-pane -D
bind -n C-up    select-pane -U

# Pane special operations
bind -n C-M-up    respawn-pane -k
bind -n C-M-down  kill-pane
bind -n C-M-left  swap-pane -U
bind -n C-M-right swap-pane -D
bind -n C-M-o resize-pane -Z
bind -n C-M-k clear-history
bind h clear-history

# Paste other pane's directory
bind -n C-M-S-right run-shell "~/dotfiles/tmux/tmux_cd_fetcher.sh" \; load-buffer -b tmp-copy-buffer ~/.tmux_buffer_tmp \; paste-buffer -b tmp-copy-buffer -d \; run-shell -b "rm ~/.tmux_buffer_tmp"

# Re-pwn function
# https://burnicki.pl/en/2021/07/04/dump-tmux-pane-history-to-a-file.html
# - shows how to get previous pane output; search it for first instance of nka/gmul
# bind -n C-M-S-up send-keys -t left C-d \; send-keys -t right C-d \; run-shell -b "sleep 0.5; tmux send-keys -t left Up Enter; sleep 0.5; tmux send-keys -t right Up Enter"
bind -n C-M-S-up run-shell "~/dotfiles/tmux/tmux_repwn.sh"
# Add: echo 'tmux bind-key -n C-M-z run-shell "\"$extrakto_open\" \"#{pane_id}\""' >> ~/.tmux/plugins/extrakto/extrakto.tmux
bind o run-shell "~/dotfiles/tmux/tmux_repwn.sh"

# Select previous command output
bind -n C-M-S-left {
    copy-mode
    send -X clear-selection
    send -X cursor-up
    send -X end-of-line
    send -X begin-selection
    send -X search-backward ""
    send -X cursor-down
    send -X start-of-line
}

# Window splitting
bind -n C-M-\\ split-window -h
bind -n C-M-] split-window -v

# Keybinding for voltron
bind v source-file ~/.tmux/voltron.session

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'jimeh/tmux-themepack'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
#set -g @plugin 'Morantron/tmux-fingers'
set -g @plugin 'schasse/tmux-jump'
set -g @plugin 'fcsonline/tmux-thumbs'
set -g @plugin 'laktak/extrakto'
set -g @plugin 'roosta/tmux-fuzzback'

bind-key -T copy-mode-vi 'H' send-keys -X copy-pipe-and-cancel '~/dotfiles/tmux/tmux_gdb_popup.sh'
bind-key -T copy-mode-vi 'G' send-keys -X copy-pipe '~/dotfiles/tmux/tmux_addr_copy.sh'
set -g @copy_mode_put 'C-y'
bind-key -T copy-mode-vi 'Y' send -X copy-pipe 'xclip -in -selection clipboard'
bind-key -T copy-mode-vi 's' run-shell 'echo x/s > ~/.tmux_gdb_cmd'\; send-keys -X copy-pipe-and-cancel '~/dotfiles/tmux/tmux_gdb_helper.sh'
bind-key -T copy-mode-vi '1' run-shell 'echo x/10gx > ~/.tmux_gdb_cmd'\; send-keys -X copy-pipe-and-cancel '~/dotfiles/tmux/tmux_gdb_helper.sh'
bind-key -T copy-mode-vi '2' run-shell 'echo x/20gx > ~/.tmux_gdb_cmd'\; send-keys -X copy-pipe-and-cancel '~/dotfiles/tmux/tmux_gdb_helper.sh'
bind-key -T copy-mode-vi '3' run-shell 'echo x/30gx > ~/.tmux_gdb_cmd'\; send-keys -X copy-pipe-and-cancel '~/dotfiles/tmux/tmux_gdb_helper.sh'
bind-key -T copy-mode-vi '5' run-shell 'echo x/50gx > ~/.tmux_gdb_cmd'\; send-keys -X copy-pipe-and-cancel '~/dotfiles/tmux/tmux_gdb_helper.sh'
bind-key -T copy-mode-vi 'z' run-shell 'echo x/100gx > ~/.tmux_gdb_cmd'\; send-keys -X copy-pipe-and-cancel '~/dotfiles/tmux/tmux_gdb_helper.sh'
bind-key -T copy-mode-vi '@' run-shell 'echo x/200gx > ~/.tmux_gdb_cmd'\; send-keys -X copy-pipe-and-cancel '~/dotfiles/tmux/tmux_gdb_helper.sh'
bind-key -T copy-mode-vi 'p' run-shell 'echo p/x > ~/.tmux_gdb_cmd'\; send-keys -X copy-pipe-and-cancel '~/dotfiles/tmux/tmux_gdb_helper.sh'
bind-key c popup -E -w70 -h20 'echo -n "$(greenclip print | fzf -e -i)" > ~/.tmux_gdb_cmd;'\; run-shell 'tmux send-keys "$(cat ~/.tmux_gdb_cmd)"'

# TODO: make a fastdiract-style paste menu to assign things to paste (1-9 paste slots)
# bind-key p popup -E

# tmux show-options -g to show global options
bind-key p run-shell "~/dotfiles/tmux/tmux_paste_popup.sh"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
bind-key t run-shell "tmux set -g @thumbs-command 'echo {} | ~/dotfiles/tmux/tmux_gdb_popup.sh'"\; thumbs-pick\; run-shell "(sleep 0.2; tmux set -g @thumbs-command 'tmux set-buffer -- {} && tmux display-message \"Copied {}\"') &"
